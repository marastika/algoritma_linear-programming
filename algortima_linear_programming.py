# -*- coding: utf-8 -*-
"""Algortima linear programming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o5Kfsl8Nxin1qy3QJjzv8Yi0TuDkszXX
"""

pip install pulp

import pulp

# Step 1: Create a LP Minimization problem
model = pulp.LpProblem("Minimize_Cost_of_Acid_Mine_Drainage_Treatment", pulp.LpMinimize)

# Step 2: Define decision variables
x1 = pulp.LpVariable("Method1_volume", lowBound=0, cat='Continuous')  # Volume treated by Method 1
x2 = pulp.LpVariable("Method2_volume", lowBound=0, cat='Continuous')  # Volume treated by Method 2

# Step 3: Objective Function
# Assuming cost per unit volume for Method 1 is $20 and for Method 2 is $30
model += 20 * x1 + 30 * x2, "Total Treatment Cost"

# Step 4: Constraints
# Assume we need to treat at least 100 units of contaminants
# Method 1 removes 0.4 units per volume, Method 2 removes 0.5 units per volume
model += 0.4 * x1 + 0.5 * x2 >= 100, "Contaminant Reduction Requirement"

# Step 5: Solve the problem
model.solve()
print("Status:", pulp.LpStatus[model.status])

# Step 6: Print the optimal decision variable values and the minimum cost
print(f"Optimal Volume to treat using Method 1: {x1.varValue}")
print(f"Optimal Volume to treat using Method 2: {x2.varValue}")
print(f"Total Cost of Treatment: ${pulp.value(model.objective)}")

from pulp import LpMinimize, LpProblem, LpStatus, lpSum, LpVariable

# Membuat model
model = LpProblem(name="minimasi-biaya-operasional", sense=LpMinimize)

# Mendefinisikan variabel
x1 = LpVariable(name="x1", lowBound=0)
x2 = LpVariable(name="x2", lowBound=0)
x3 = LpVariable(name="x3", lowBound=0)

# Menambahkan fungsi tujuan
model += (500 * x1 + 200 * x2 + 150 * x3, "Total Cost")

# Menambahkan batasan
model += (x1 <= 24, "maks_peralatan")
model += (x2 <= 500, "maks_bahan_kimia")
model += (x3 <= 30, "maks_tenaga_kerja")
model += (0.1 * x1 + 0.5 * x2 >= 50, "standar_pengolahan")

# Menyelesaikan model
status = model.solve()

# Output hasil
print(f"Status: {model.status}, {LpStatus[model.status]}")
print(f"x1: {x1.value()}, x2: {x2.value()}, x3: {x3.value()}")

import pulp as pl

# Inisiasi model
model = pl.LpProblem("Optimasi_Pengolahan_Air_Asam_Tambang", pl.LpMinimize)

# Definisi variabel keputusan
# x1, x2, dan x3 masing-masing adalah jumlah bahan kimia A, B, dan C yang digunakan
x1 = pl.LpVariable("Bahan_Kimia_A", lowBound=0)
x2 = pl.LpVariable("Bahan_Kimia_B", lowBound=0)
x3 = pl.LpVariable("Bahan_Kimia_C", lowBound=0)

# Fungsi tujuan (Minimalkan total biaya)
model += 10 * x1 + 20 * x2 + 15 * x3, "Total_Biaya"

# Batasan
model += x1 + x2 + x3 <= 1000, "Batas_Total_Bahan_Kimia"
model += 2 * x1 + 4 * x2 + 3 * x3 >= 500, "Kebutuhan_Minimum_Efektivitas"
model += x2 <= 300, "Batas_Bahan_Kimia_B"
model += x3 >= 50, "Kebutuhan_Minimum_Bahan_Kimia_C"

# Menyelesaikan model
model.solve()

# Menampilkan hasil
print("Status:", pl.LpStatus[model.status])
print("Optimal menggunakan Bahan Kimia A:", pl.value(x1))
print("Optimal menggunakan Bahan Kimia B:", pl.value(x2))
print("Optimal menggunakan Bahan Kimia C:", pl.value(x3))

from scipy.optimize import linprog

# Koefisien dalam fungsi tujuan (minimalkan biaya)
c = [10, 20, 15]  # Biaya untuk bahan kimia A, B, C

# Matriks A dalam bentuk batasan Ax <= b
A = [[1, 1, 1],  # Total bahan kimia
     [-2, -4, -3]]  # Efektivitas bahan kimia

# Vektor b, menyatakan batasan kanan
b = [1000, -500]  # Batas atas total bahan kimia dan batas bawah keefektifan

# Batas untuk setiap variabel (bahan kimia)
x_bounds = [(0, None),  # Bahan kimia A tidak ada batas atas
            (0, 300),   # Bahan kimia B dibatasi hingga 300
            (50, None)]  # Bahan kimia C minimal 50

# Menyelesaikan optimasi
res = linprog(c, A_ub=A, b_ub=b, bounds=x_bounds, method='highs')

# Menampilkan hasil
print("Status:", res.message)
print("Biaya Minimum:", res.fun)
print("Penggunaan Bahan Kimia A, B, C:", res.x)